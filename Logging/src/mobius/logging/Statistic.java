/*
 * Software Engineering Tools.
 *
 * $Id: Statistic.jass,v 1.1.1.1 2002/12/29 12:36:16 kiniry Exp $
 *
 * Copyright (c) 1997-2001 Joseph Kiniry
 * Copyright (c) 2000-2001 KindSoftware, LLC
 * Copyright (c) 1997-1999 California Institute of Technology
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the Joseph Kiniry, KindSoftware, nor the
 * California Institute of Technology, nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL KIND SOFTWARE OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package mobius.logging;

import java.io.Serializable;

/**
 * <P> This class represents a statistic that can be monitored in the
 * monitoring system. Each statistic has its own unique ID (node-unique, not
 * necessarily globally unique), a description, units, and other useful
 * information that is represented in this class. </P>
 *
 * @version alpha-1
 * @author Joseph R. Kiniry (kiniry@acm.org)
 * @bon This class represents a statistic that can be monitored in the
 * monitoring system. Each statistic has its own unique ID (node-unique, not
 * necessarily globally unique), a description, units, and other useful
 * information that is represented in this class.
 *
 * @invariant (for_all (s,t : Statistic) : s.getID() != t.getID()) Unique
 * ID must be unique across all statistics generated by a set of
 * systems/components using mobius.logging.
 * @concurrency (CONCURRENT) All methods are getters, thus there are no
 * concurrency issues.
 * @modifies (SINGLE-ASSIGNMENT-FIELDS) All attributes are set only on
 * construction.
 * @modifies (QUERY-METHODS) All methods are functions.
 * @bon All static properties must be specified at, and cannot be changed
 * after, construction time.
 */
//+@ nullable_by_default
/*-@ immutable @*/ /*#thread_shared*/ public class Statistic
  implements Serializable {
  // Attributes


  //@ public represents theHashCode <- my_unique_ID;

  /** Placeholder serialVersionUID. */
  private static final long serialVersionUID = 1L;

  /**
   * <p> Counter for assigning new uniqueIDs to constructed Statistics.
   * Used to guarantee uniqueness. </p>
   *
   * @see Statistic
   */
  private static /*@ spec_public @*/ int my_current_ID /*#guarded_by this */;

  /**
   * <p> The unique ID for this statistic. </p>
   *
   * @see #getID
   * @example uniqueID = 42
   */
  private /*@ spec_public @*/ final int my_unique_ID;

  /**
   * <p> Units of statistic. </p>
   *
   * @see #getUnits
   * @example units = "messages/second"
   */
  private final /*@ spec_public @*/ String my_units;

  /**
   * <p> Scaling factor of values. </p>
   *
   * @see #getScale
   * #example scale = "1000"
   * @example So, when combined with the above "messages/second" units, the
   * resulting metric is thousands of messages per second.  I.e. A value of
   * 4.2 would mean that the most recent result of this statistic is that
   * whatever thing is reporting is moving/delivering/deleting/whatever
   * 4,200 messages/second.
   */
  private final /*@ spec_public @*/ double my_scale;

  /**
   * <p> Default starting value for statistic. </p>
   *
   * @see #getStart
   * @see AbstractCollect#reset
   */
  private final /*@ spec_public @*/ double my_default_start_value;

  /**
   * <p> Default increment value for statistic. </p>
   *
   * @see #getIncrement
   * @see AbstractCollect#increment(Statistic)
   */
  private final /*@ spec_public @*/ double my_default_increment;

  /**
   * <p> Default decrement value for statistic. </p>
   *
   * @see #getDecrement
   * @see AbstractCollect#decrement(Statistic)
   */
  private final /*@ spec_public @*/ double my_default_decrement;

  // Constructors

  /**
   * <p> This the standard constructor for Statistic.  No other constructor
   * can be legally used. </p>
   *
   * @param the_units Statistic's units.
   * @param the_scale Statistic's scaling factor.
   * @param the_start Statistic's default starting value.
   * @param the_increment Statistic's default increment value.
   * @param the_decrement Statistic's default decrement value.
   *
   * @bon Create a new statistic by specifying its units, scaling factor,
   * default start value,  default increment and default decrement.
   * @ensures Result.getID() is unique amongst all statistics that this VM
   * has generated.
   * @generates A new, valid instance of Statistic.
   */
  //@ requires the_scale != 0.0;
  //@ ensures my_unique_ID == \old(my_current_ID);
  //@ ensures my_current_ID == \old(my_current_ID) + 1;
  //@ ensures getUnits() == the_units;
  //@ ensures getScale() == the_scale;
  //@ ensures getStart() == the_start;
  //@ ensures getIncrement() == the_increment;
  //@ ensures getDecrement() == the_decrement;
  public Statistic(final String the_units,
                                final double the_scale, final float the_start,
                                final float the_increment, final float the_decrement) {
    synchronized (Statistic.class) {
      my_unique_ID = my_current_ID;
      my_current_ID++;
    }
    this.my_units = the_units;
    this.my_scale = the_scale;
    this.my_default_start_value = the_start;
    this.my_default_increment = the_increment;
    this.my_default_decrement = the_decrement;
  }

  // Inherited methods

  /**
   * @return What is my (unique) hash code?
   * @modifies QUERY
   * @overrides java.lang.Object.hashCode
   */
  public int hashCode() {
    return my_unique_ID;
  }

  // Public Methods

  //@ ensures \result == my_unique_ID;
  /**
   * @modifies QUERY
   * @return What is my unique ID?
   */
  public /*@ pure @*/ int getID() {
    return my_unique_ID;
  }

  //@ ensures \result == my_units;
  /**
   * @modifies QUERY
   * @return What are my units?
   */
  public /*@ pure @*/ String getUnits() {
    return my_units;
  }

  //@ ensures \result == my_scale;
  /**
   * @modifies QUERY
   * @return What is my default scaling factor?
   */
  public /*@ pure @*/ double getScale() {
    return my_scale;
  }

  //@ ensures \result == my_default_start_value;
  /**
   * @modifies QUERY
   * @return What is my default start value?
   */
  public /*@ pure @*/ double getStart() {
    return my_default_start_value;
  }

  //@ ensures \result == my_default_increment;
  /**
   * @modifies QUERY
   * @return What is my default increment?
   */
  public /*@ pure @*/ double getIncrement() {
    return my_default_increment;
  }

  //@ ensures \result == my_default_decrement;
  /**
   * @modifies QUERY
   * @return What is my default decrement?
   */
  public /*@ pure @*/ double getDecrement() {
    return my_default_decrement;
  }

  // Protected Methods
  // Package Methods
  // Private Methods

} // end of class Statistic

/*
 * Local Variables:
 * Mode: Java
 * fill-column: 75
 * End:
 */
